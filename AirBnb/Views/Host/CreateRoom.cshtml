@model AirBnb.Models.Phong

@{
    ViewBag.Title = "CreateRoom";
    Layout = "~/Views/Shared/_HostLayout.cshtml";
}

<div class="container-fluid my-4">
    <h2 class="text-center primaryColor fs-2 fw-bold">Create A New Room</h2>

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="row">
                <div class="col-md-6 ">
                    <div class="form-group">
                        @Html.LabelFor(model => model.TieuDe, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.TieuDe, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.TieuDe, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.DiaChi, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.DiaChi, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.DiaChi, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.MoTa, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.TextAreaFor(model => model.MoTa, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.MoTa, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Gia1Ngay, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Gia1Ngay, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Gia1Ngay, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.DieuKhoan, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.TextAreaFor(model => model.DieuKhoan, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.DieuKhoan, "", new { @class = "text-danger" })
                        </div>
                    </div>



                    <div class="form-group">
                        @Html.LabelFor(model => model.SLKhach, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.SLKhach, new { htmlAttributes = new { @class = "form-control", @min = "1", @max = "5" } })
                            @Html.ValidationMessageFor(model => model.SLKhach, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.NgayBatDau, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <input type="date" id="start" name="NgayBatDau" value="" class="form-control" />
                            @Html.ValidationMessageFor(model => model.NgayBatDau, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.NgayKetThuc, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <input type="date" id="end" name="NgayKetThuc" value="" class="form-control" />
                            @Html.ValidationMessageFor(model => model.NgayKetThuc, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="col-md-6  ">
                    <div class="form-group">
                        @Html.LabelFor(model => model.HinhAnh1, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.HinhAnh1, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.HinhAnh1, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.HinhAnh2, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.HinhAnh2, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.HinhAnh2, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.HinhAnh3, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.HinhAnh3, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.HinhAnh3, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.HinhAnh4, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.HinhAnh4, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.HinhAnh4, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.HinhAnh5, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.HinhAnh5, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.HinhAnh5, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.MaDanhMuc, "MaDanhMuc", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownList("MaDanhMuc", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.MaDanhMuc, "", new { @class = "text-danger" })
                        </div>
                    </div>





                    <div class="form-group">
                        @Html.LabelFor(model => model.MaKM, "MaKM", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownList("MaKM", ViewBag.MaKM as SelectList, "-- Select KM --", htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.MaKM, "", new { @class = "text-danger" })
                        </div>
                    </div>


                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10 my-2">
                            <input type="submit" value="Create" class="btn btn-danger" />
                        </div>
                    </div>

                </div>
            </div>






        </div>
    }

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>


</div>




<script>
    // Get the current date and format it for setting the minimum value of the date picker
    var today = new Date();
    var todayFormatted = today.toISOString().split('T')[0];

    // Lắng nghe sự kiện khi trường Ngày bắt đầu thay đổi
    document.getElementById('start').addEventListener('change', function () {
        var startDate = new Date(this.value); // Lấy giá trị Ngày bắt đầu

        // Tạo ngày tối đa cho trường Ngày kết thúc
        var maxEndDate = new Date(startDate);
        maxEndDate.setDate(maxEndDate.getDate() + 30); // Tăng giá trị Ngày kết thúc lên 30 ngày từ Ngày bắt đầu

        // Định dạng ngày cho trường Ngày kết thúc
        var maxEndYear = maxEndDate.getFullYear();
        var maxEndMonth = (maxEndDate.getMonth() + 1).toString().padStart(2, '0');
        var maxEndDay = maxEndDate.getDate().toString().padStart(2, '0');
        var formattedMaxEndDate = maxEndYear + '-' + maxEndMonth + '-' + maxEndDay;

        // Cập nhật giá trị Ngày kết thúc và giới hạn max của trường Ngày kết thúc
        document.getElementById('end').value = '';
        document.getElementById('end').setAttribute('min', this.value);
        document.getElementById('end').setAttribute('max', formattedMaxEndDate);
    });

    // Lắng nghe sự kiện khi trường Ngày kết thúc thay đổi
    document.getElementById('end').addEventListener('change', function () {
        var startDate = new Date(document.getElementById('start').value); // Lấy giá trị Ngày bắt đầu
        var endDate = new Date(this.value); // Lấy giá trị Ngày kết thúc

        // Kiểm tra điều kiện Ngày kết thúc không được nhỏ hơn Ngày bắt đầu và không được vượt quá 30 ngày
        var differenceInTime = endDate.getTime() - startDate.getTime();
        var differenceInDays = differenceInTime / (1000 * 3600 * 24);
        if (endDate < startDate || differenceInDays > 30) {
            this.setCustomValidity('Ngày kết thúc phải lớn hơn hoặc bằng Ngày bắt đầu và không vượt quá 30 ngày.');
        } else {
            this.setCustomValidity('');
        }
    });

    // Set the minimum value for both date pickers to the current date
    document.getElementById('start').setAttribute('min', todayFormatted);
    document.getElementById('end').setAttribute('min', todayFormatted);
</script>

